Aula EDA 20/03/17 
Merge Sort	
Radix Sort
Proxima aula -> Counting sort


Árvores AVL são contados os níveis e não os nós. POde existir um nível com apenas um nó.

Se os sinais da raiz e do filho que seria a raiz são diferentes teremos que fazer a rotação dupla. Do contrário a ratação sará simples.

Quando a árvore estiver pesada para o lado direito a rotaçao deverá ser para esquerda e vice-versa. Ex: -2 e +1 um uma mesma árvore deveremos fazer uma rotação para esquerda e em seguida um para direita.

**Criar uma árvore com um atributo para armazenar o fator de balanceamento(FB). Função que faz a rotação. Funçao que verifica o FB. Uma func p/ rotaçao direita e outra p/ esquerda.

Árvore binaria; quando preciso remover um elemento com filho: maior = um pra esquerda e tudo pa/ direita. menor = ...


COntagem : esquerda negativo, direita positivo.


-------------------------------------------------------------
ARVORE RUBRO-NEGRA
Mais eficiente que a árvore AVL

Propriedade 5 slide 6 (https://www.ime.usp.br/~song/mac5710/slides/08rb.pdf)
Para um caminho, seguir apenas uma linha.
EX: Analisando o 26.
caminho 1: 24 -> 7 -> folha;
caminha 2: 41 -> 30 -> folha;

Gravar todas essas propriedades.

~nota todos os nos inseridos são da cor vermelha(inclusive a raíz, que por regra deve ser preta), se uma inserção ferir umas das regras da árvore,ex dois nos vermelhos se encontrarem, é necessário realizar o balanceamento da árvore. ~
O primeiro "balanceamento" da árvore acontece na inserção do primeiro nó (Raíz) em que é verificado quem é o pai do nó, no caso null, portanto é raiz, solução trocar de cor.
	1 - Inserir no vermelho
	2 - Olhar pai do no
		2.1 - Se for null trocar para preto
		2.2 - Se o pai for preto // n ha problemas
		2.3 - Se o pai e o tio são vermelhos, realizar a troca da cor do nó pai, tio e avô *(https://pt.wikipedia.org/wiki/%C3%81rvore_rubro-negra)

*Visualização (https://www.cs.usfca.edu/~galles/visualization/RedBlack.html)

O máximo de nós vermelhos que podem ser inseridos em uma arvore é a metade dos nos. O suficiente para dobrar o tamanho do ramo.

Nós vermelhos são estimulos q causam rotações.
------------------------------------------------------------------------------------------------
Aula EDA 17/04/17
Dicas Prova(Olhar lista de algoritmos no moodle) Acho que cai até árvore rubro negro
Dividir para conquistar
------------------------------------------------------------------------------------------------------------------------------
Aula EDA 05/05/17
Fim do dividir para conquistar com (Menor distacia entre dois pontos);

Essas são as listas de exercicios.

Listas:
	Cap 4
	Exercicios: 4,5,7,12.13 e 15
	Escolher: 5
	
	Cap 5 
	Exercicios: 1 - 5
	Escolher: 4
	
	Cap 6
	Exercicios 1,2,3,5,6,7,9,20,28
	Escolher: 5
	
	**Lista de grafos será o Trabalho Final


Inicio ->  Programação Dinamica
-----------------------------------------------------------------------
Aula 08/05/17

Weighted Interval Scheduling: Finding a Solution -> slide 10 Dynamic Programming

Maior Subsequência Crescente
	Maior sub. em quantidade de elementos.
	Slide 18: Na concatenação de elemetos só pode ocorrer se o elemeto for menor que o elemento comparado.

Knapsack Problem
	Wi -> peso de um elemento
	**Prova Exercício da Mochila
		Recursão -> fazer o não levar primeiro e depois o levar(Na situação da ultima tabela)
--------------------------------------------------------------------------------------------------------------
12/05/17 Sequence Alignment 

Slide 36 Seguence Alignment : ERRADO [não completamete errado, grey cube acho que está certo]

Primeiro caso: Assume mismatch
	Opt(6,6) Mismatch de x6 - y6 + Opt(5,5)
Segundo caso:
	compara x i-1 com y j;
Terceiro caso:
	tenta casar y j -1 com x i;
OBs: O gap sempre é colocado descolando-se os elemetos para tras e não para frente.
Caso ocorra duas letras iguais -> copiar diagonal, ou seja, 0 + Melhor encaixe até agora
---------------------------------------
15/05/17
Grafo
---------------------------------------
19/05/17
Busca em largura(BFS) e Busca em pronfundidade(fazer na mão provavelmento PROVA)[PROVA]
-----------------------------------------
22/05;/17
Grafo bi-partido
Grafo em classe
uma classe com um Arraylist de nodes
cada node tem um valor node e um Arraylist contendo os visinhos do no.
Grafo inverso - para saber se um grafo é fortemente conectado[PROVA]
Se a partir de um nó é possivel chegar em |n-1| e ao inverter os vertices do grafo ainda é possivel chegar a todos os |n-1| nos o grafo é fortemento conectado.
---------------------------------------------
26/05/17
Gerando grafos revesos 
A contagem do número de arrestas em um grafo direcional é igual ao número de arestas.
Realizando a lista de adjacencias em um grafo reverso direcional:
 para manter a ordem dos parentes do nó deve-se realizar a conversao
 (para o grafo inverso) do ultimo para o primeiro nó.DE BAIXO PARA CIMA

no conectividade

1  2->3 (ou seja no um tem visinhos 2 3 nessa ordem)
Inverção

2 1 (agora o nó dois seja em um e o 3 chega em um )
3 1


Verifica se o grafo é fortemente conectado
1 tenta chegar em todos
2 gera o grafo reverso
3 tenta chegar em todos apartir do mesmo nó.


Titulo: Grafos Direcionados Acíclicos (slide 78)[PROVA]
	Exemplo são as materias da FGA com pré requisito.
	A IDE compila os arquivos da ordem em que voce os importou no arquivo.

	Ordenação topologica: desenhar os nos em outra forma (lista) facilita
	pois se houver alguma seta no sentido contrario o grafo possui um	
	ciclo e te da a ordem que as tarefas devem ser feitas. [slide 80].
	1 .Primeiro nó  aquele que possui o menor ou nenhum elemento apontado 
	para ele. [Slide 87].
	2. Gera o grafo inverso do no visinho do que foi destruido e verifica se  ele  aponta para alguem. se não apontar ele será o proximo da lista.
	3. quando apagar um nó percorrer a lista dos visinhos desse nó e apagar
	a referencia desse no na lissta dos visinho.


Pesquisar: algoritmo polinomial, busca em largura (BFS), busca em profundidade(Slide 43).
------------------------------------------------------------------------
29/05/17
Componentes fortemete conectados[PROVA]

Componentes = conjunto de nós fortemente conectados  dentro de um grafo. Olhar imagem 
	(https://en.wikipedia.org/wiki/Strongly_connected_component).
Imaginar que cada conponente conectado seja apenas um nó.
O grafo resultande é um grafo disordanado aciclico
Fazer Ordenação topológica na mão [PROVA]
Sinck node -> componente o qual todas as arestas chegam nele porem nenhuma sai. É possivel realizar uma busca em profundidada
 para que possa ser identificados todos os seus componentes.

1 Identificar o coponente que não possui aresta saindo dele. (Ele será o primeiro componente fortemento conectados)
2 Após identificar o Sinck node remove-lo.
3 Identificar o proximo componente que não possui areste sainda dele ou seja ele não aponta para ninguem.
4 .. Assim por diante ate não houverem mais nós.
Problema: COmo achar o ralo(sinck node)
Solução: realizar uma ordenação topológica para no grafo inverso para achar o sinck node.
^^^^^ essa é somente a lógica
BUsca em profundidade em componentes fortemente conectados [PROVA**](slide 108)

realizar busca em largura de  -> realizar a busca em largura (começando do ultimo elemento identificado na busca em largura) no grafo inverso.(slide 116) isso identifica os ralos.

Exercicio pra revisar Prova (slide 106).

F 7/14 -> H 8/9 -> G 10/13 -> D 11/12 ??
C 15/16;

B 1/4 -> E 2/3
A 5/6

Busca em profundidade do grafo original
Busca em largura no grafo inverso


Utilização para descobrir celular terrorista = componente


Código de huffman [PROVA]
----------------------------------------------------------------------
02/05/17

Trabalho final de EDA [26/05/17]
Prova de EDA [19/05/17
]
Shortest paths in a graph

profundidade não te da o menor caminho. da o caminho de um nó para todos
os outros no
por largura[te da o menor numero de arestas] é possivel
achar o menor caminha por arestar.

dikstra na mão
Mancha			Opções
(S)-0				15,(7),S
(2)-9-S			32,(3),2
(6)-14-S

eu anulo o valor da opçao de caminha para um no se este
 for menor do que eu ja tenho
Manter uma estrutura no heap
